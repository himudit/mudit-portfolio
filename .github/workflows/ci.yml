name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    name: Code Quality & Build Verification

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Run ESLint
        run: ${{ steps.detect-package-manager.outputs.runner }} next lint
        continue-on-error: false

      - name: Run TypeScript type check
        run: ${{ steps.detect-package-manager.outputs.runner }} tsc --noEmit
        continue-on-error: false

      - name: Run Prettier check
        run: ${{ steps.detect-package-manager.outputs.runner }} prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"
        continue-on-error: false

      - name: Build application
        env:
          # Use dummy values for build verification if secrets aren't available
          NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN: ${{ secrets.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN || 'dummy_token_for_build' }}
          NEXT_PUBLIC_MAPBOX_LIGHT_STYLE_URL: ${{ secrets.NEXT_PUBLIC_MAPBOX_LIGHT_STYLE_URL || 'mapbox://styles/mapbox/light-v11' }}
          NEXT_PUBLIC_MAPBOX_DARK_STYLE_URL: ${{ secrets.NEXT_PUBLIC_MAPBOX_DARK_STYLE_URL || 'mapbox://styles/mapbox/dark-v11' }}
          NEXT_PUBLIC_GOOGLE_RECAPTCHA_SITE_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_RECAPTCHA_SITE_KEY || 'dummy_key_for_build' }}
          NEXT_PUBLIC_EMAILJS_SERVICE_ID: ${{ secrets.NEXT_PUBLIC_EMAILJS_SERVICE_ID || 'dummy_service_id' }}
          NEXT_PUBLIC_EMAILJS_TEMPLATE_ID: ${{ secrets.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID || 'dummy_template_id' }}
          NEXT_PUBLIC_EMAILJS_PUBLIC_KEY: ${{ secrets.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY || 'dummy_public_key' }}
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
        continue-on-error: false

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .next/static
          key: ${{ runner.os }}-nextjs-build-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-build-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

  # Optional: Add a job for dependency security scanning
  security-audit:
    runs-on: ubuntu-latest
    name: Security Audit

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true # Allow this to pass with warnings

  # Job to check if all required checks pass
  all-checks-pass:
    runs-on: ubuntu-latest
    needs: [quality-checks, security-audit]
    name: All Checks Status

    steps:
      - name: Check all jobs status
        run: echo "All quality checks passed successfully! âœ…"
